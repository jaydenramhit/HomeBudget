<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HomeBudget</name>
    </assembly>
    <members>
        <member name="T:Budget.BudgetItem">
            <summary>
            Represents a single item that will contribute to a budget, along with it's category and expense.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.CategoryID">
            <summary>
            Gets or sets the category id of the budget item.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.ExpenseID">
            <summary>
            Gets or sets the expense id of the budget item.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Date">
            <summary>
            Gets or sets the date of the budget item.
            </summary>
            <value>Represents the date the BudgetItem was purchased.</value>
        </member>
        <member name="P:Budget.BudgetItem.Category">
            <summary>
            Gets or sets the category of the budget item.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.ShortDescription">
            <summary>
            Gets or sets the short description of the budget item.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Amount">
            <summary>
            Gets or sets the amount of the budget item.
            </summary>
        </member>
        <member name="P:Budget.BudgetItem.Balance">
            <summary>
            Gets or sets the balance when this budget item was created.
            </summary>
        </member>
        <member name="T:Budget.BudgetItemsByMonth">
            <summary>
            Represents all the BudgetItems for one month with their total price.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByMonth.Month">
            <summary>
            Gets or sets the month encompassed by the budget items by month object.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByMonth.Details">
            <summary>
            Gets or sets the details about the budget items in this month.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByMonth.Total">
            <summary>
            Gets or sets the total of the budget items in the budget items by month object.
            </summary>
        </member>
        <member name="T:Budget.BudgetItemsByCategory">
            <summary>
            Represents all the BudgetItems for a category with their total price.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByCategory.Category">
            <summary>
            Gets or sets the category encompassed by the budget items by category object.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByCategory.Details">
            <summary>
            Gets or sets the details about the budget items by category object.
            </summary>
        </member>
        <member name="P:Budget.BudgetItemsByCategory.Total">
            <summary>
            Gets or sets the total price of the budget items in the budget items by category object.
            </summary>
        </member>
        <member name="T:Budget.Categories">
            <summary>
            Represents a collection of category items.
            </summary>
        </member>
        <member name="M:Budget.Categories.#ctor(System.Data.SQLite.SQLiteConnection,System.Boolean)">
            <summary>
            Creates a categories object with the connection to the database passed.
            The if the <paramref name="newDB"/> flag is true, the categories table in the database
            is reset.
            </summary>
            <param name="connection">A connection to a database.</param>
            <param name="newDB">Indicates that the connection is to a new database.</param>
        </member>
        <member name="M:Budget.Categories.GetCategoryFromId(System.Int32)">
            <summary>
            Finds a category with the id passed in <paramref name="i"/>.
            </summary>
            <param name="i">The id of the category to return.</param>
            <returns>A Category object with the id passed in <paramref name="i"/>.</returns>
            <example>
            <b>Create a list of categories with ids between and including 3 and 7.</b>
            <code>
            <![CDATA[
            try{
                HomeBudget homeBudget = new HomeBudget(filename, false);
                homeBudget.categories = defaultCategories;
                List<Category> categoryList = new List<Category>();
                
                // Fill the new list with the desired categories
                for(int i = 3; i < 8; i++){
                    categoryList.Add(categories.GetCategoryFromId(i));
                }
            }
            catch (Exception e){
                Console.WriteLine(e.Message);
            }
            ]]>
            </code>
            </example>
            <exception cref="T:System.Exception">Thrown when the passed id was not found in any of the categories.</exception>
        </member>
        <member name="M:Budget.Categories.UpdateProperties(System.Int32,System.String,Budget.Category.CategoryType)">
            <summary>
            Finds a category and updates it in the database
            </summary>
            <param name="id">The Id of the catgeory to find</param>
            <param name="newDescr">the new  description that overwrites the current one </param>
            <param name="income"> the  category type thet  overwrites the current one</param>
            <example>
            <b> finds the category of id 3 and updates it's description and category type and it to a list</b>
            <code>
            <![CDATA[
            try{
                HomeBudget homeBudget = new HomeBudget("databaseFile.db", false)
                Categories categories = homeBudget.list;
                int i=3;
               
                categories.UpdateProperties(i,"a lot of money",income);
                
            }
            catch (Exception e){
                Console.WriteLine(e.Message);
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Categories.SetCategoriesToDefaults">
            <summary>
            Populates the list of categories with default values.
            </summary>
            <example>
            <b>Reset the categories of an already created HomeBudget</b>
            <code>
            <![CDATA[
            Categories defaultCategories = new Categories(connection, true);
            try{
                HomeBudget homeBudget = new HomeBudget(filename, false);
                homeBudget.categories.SetCategoriesToDefaults();
            }
            catch (Exception e){
                Console.WriteLine(e.Message);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Categories.Add(System.String,Budget.Category.CategoryType)">
            <summary>
            Creates a new category and with the type and description passed. The new category object's id will be one larger than the previous largest id.
            </summary>
            <param name="desc">The description of the new category.</param>
            <param name="type">The type of the new category.</param>
            <example>
            <b>Add a Category to a Categories object.</b>
            <code>
            <![CDATA[
            try{
                HomeBudget homeBudget = new HomeBudget(filename, false);
                Categories categories = homeBudget.categories;    
            
                // Add categories
                categories.Add("Gas", Category.CategoryType.Expense);
                categories.Add("Part Time Job", Category.CategoryType.Savings);
                categories.Add("Full Time Job", Category.CategoryType.Savings);
                categories.Add("MasterCard", Category.CategoryType.Credit);  
            }
            catch (Exception e){
                Console.WriteLine(e.Message);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Categories.Delete(System.Int32)">
            <summary>
            Deletes a category with the passed <paramref name="Id"/> from the list of categories.
            </summary>
            <param name="Id">The id of the category to delete.</param>
            <example>
            <b>Remove Categories with ids between 5 and 10.</b>
            <code>
            <![CDATA[
            try{
                HomeBudget homeBudget = new HomeBudget(connection, false);
                
                for (int i = 5; i < 11; i++){
                    homeBudget.categories.Delete(i);
                }
            }
            catch (Exception e){
                Console.WriteLine(e.Message); 
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Categories.List">
            <summary>
            Creates a list with the categories stored in this object, and returns it.
            </summary>
            <returns>A copy of the list of categories list stored in this object.</returns>
            <example>
            <b>Display all the categories.</b>
            <code>
            <![CDATA[
            // Get the list of default categories
            Categories categories = new Categories(connection, true);
            List<Category> listOfCategories = categories.List();
            
            // Write all the categories to the console.
            foreach(Category cat in listOfCategories){
                Console.WriteLine(Category.ToString());
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Budget.Category">
            <summary>
            Represents an individual category for the budget program. 
            </summary>
        </member>
        <member name="P:Budget.Category.Id">
            <summary>
            Gets the id of the category.
            </summary>
        </member>
        <member name="P:Budget.Category.Description">
            <summary>
            Gets the description of the category.
            </summary>
        </member>
        <member name="P:Budget.Category.Type">
            <summary>
            Gets the type of the category.
            </summary>
        </member>
        <member name="T:Budget.Category.CategoryType">
            <summary>
            Reresents the the type or purpose of a category.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Income">
            <summary>
            Indicates that a category type is associated with income.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Expense">
            <summary>
            Indicates that a category type is associated with expense.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Credit">
            <summary>
            Indicates that a category type is associated with credit.
            </summary>
        </member>
        <member name="F:Budget.Category.CategoryType.Savings">
            <summary>
            Indicates that a category type is associated with savings.
            </summary>
        </member>
        <member name="M:Budget.Category.#ctor(System.Int32,System.String,Budget.Category.CategoryType)">
            <summary>
            Creates a Category object with the passed <paramref name="id"/>, <paramref name="description"/> and <paramref name="type"/>. 
            If no type is passed, the new object's type will be set to <see cref="F:Budget.Category.CategoryType.Expense"/> by default.
            </summary>
            <param name="id">The id of the new Category object.</param>
            <param name="description">The description of the new Category object.</param>
            <param name="type">The type of the new Category object.</param>
            <example>
            <b>Create Category objects to add to a list</b>
            <code>
            <![CDATA[
            List<Category> categories = new List<Category>();
            categories.Add(new Category(1, "Gas"));
            categories.Add(new Category(2, "Credit Card", CategoryType.Credit));
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Category.#ctor(Budget.Category)">
            <summary>
            Creates a new category object with the same values as the Category object passed as an argument.
            </summary>
            <param name="category">The Category containing the values that will be copied to the new Category object.</param>
            <example>
            <b>Copy an existing category to make a change while keeping the original.</b>
            <code>
            <![CDATA[
            Category birthdayCategory = new Category(1, "Birthday Money", CategoryType.Savings);
            Category christmasCategory = new Category(birthdayCategory);
            
            christmasCategory.Id++;
            christmasCategory.Description = "Christmas Money";
            
            Console.WriteLine(birthdayCategory);
            Console.WriteLine(christmasCategory);
            ]]>
            </code>
            Sample Output
            <code>
            Birthday Money
            Christmas Money
            </code>
            </example>
        </member>
        <member name="M:Budget.Category.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>The Category's description.</returns>
            <example>
            <b>Display the details of each Category in a list.</b>
            <code>
            <![CDATA[
            Categories cats = new Categories();
            
            foreach (Category cat in cats.List()){
                Console.WriteLine(cat.ToString());
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Budget.Expense">
            <summary>
            Represence an individual expense for the budget program.
            </summary>
        </member>
        <member name="P:Budget.Expense.Id">
            <summary>
            Gets the expense's id.
            </summary>
        </member>
        <member name="P:Budget.Expense.Date">
            <summary>
            Gets the date of the expense.
            </summary>
        </member>
        <member name="P:Budget.Expense.Amount">
            <summary>
            Gets the amount of the expense.
            </summary>
        </member>
        <member name="P:Budget.Expense.Description">
            <summary>
            Gets a description of the expense.
            </summary>
        </member>
        <member name="P:Budget.Expense.Category">
            <summary>
            Gets the category of the expense.
            </summary>
        </member>
        <member name="M:Budget.Expense.#ctor(System.Int32,System.DateTime,System.Int32,System.Double,System.String)">
            <summary>
            Instantiates a new Expense object with the values passed.
            </summary>
            <param name="id">The id of the new Expense.</param>
            <param name="date">The date of the new Expense.</param>
            <param name="category">The category of the new Expense.</param>
            <param name="amount">The amount of the new Expense.</param>
            <param name="description">The description of the new Expense.</param>
            <example>
            <b>Create a list of expenses.</b>
            <code>
            <![CDATA[
            List<Expense> expenses = new List<Expenses>();
            expenses.Add(new Expense(1, DateTime.Now, Category.CategoryType.Expense, 14.99, "Subway"))
            expenses.Add(new Expense(2, DateTime.Now, Category.CategoryType.Credit, 20.17, "Pizza Hut"))
            
            foreach (Expense e in expenses){
                Console.WriteLine(e.Description);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Expense.#ctor(Budget.Expense)">
            <summary>
            Creates a new Expense object with the same properties as the Expense object passed (<paramref name="obj"/>)
            </summary>
            <param name="obj">The Expense object to use to create the new Expense.</param>
            <example>
            <b>Copy and change an expense, leaving the original unchanged.</b>
            <code>
            <![CDATA[
            Expense pizzaExpense = new Expense(1, DateTime.Now, Category.CategoryType.Credit, 20.17, "Pizza Hut")
            Expense iceCreamExpense = new Expense(pizzaExpense);
            
            iceCreamExpense.Id++;
            iceCreamExpense.Description = "Ice Cream";
            iceCreamExpense.Amount = 7.98;
            
            Console.Log(pizzaExpense.Description);
            Console.Log(iceCreamExpense.Description);
            ]]>
            </code>
            Sample Output
            <code>
            Pizza Hut
            Ice Cream
            </code>
            </example>
        </member>
        <member name="T:Budget.Expenses">
            <summary>
            Represents a collection of expense items inside the homebudget database
            </summary>
        </member>
        <member name="M:Budget.Expenses.#ctor(System.Data.SQLite.SQLiteConnection)">
            <summary>
            Creates an expenses object with a database connection
            </summary>
            <param name="connection">connection to the database</param>
        </member>
        <member name="M:Budget.Expenses.Add(System.DateTime,System.Int32,System.Double,System.String)">
            <summary>
            Adds new expense to the list of expenses with the properties passed to the function.
            </summary>
            <param name="date">The date of the new expense.</param>
            <param name="category">The category of the new expense.</param>
            <param name="amount">The amount of the new expense.</param>
            <param name="description">The description of the new expense.</param>
            <example>
            <b>Add an Expense to an Expenses object.</b>
            <code>
            <![CDATA[
            try{
                HomeBudget homeBudget = new HomeBudget(dbfilename,false);
               
                Expenses expenses = homeBudget.expenses;    
            
                // Add expenses
                expenses.Add(DateTime.Now, (int)Category.CategoryType.Expenses, 50.76, "Gas");
                expenses.Add(DateTime.Now, (int)Category.CategoryType.Savings, 160.32, "Part Time Job");
                expenses.Add(DateTime.Now, (int)Category.CategoryType.Savings, 890.43, "Full Time Job");
                expenses.Add(DateTime.Now, (int)Category.CategoryType.Credit, 15.21, "Domino's Pizza");
                
             
            }
            catch (Exception e){
                Console.WriteLine(e.Message);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Expenses.Delete(System.Int32)">
            <summary>
            Removes an expense with the matching <paramref name="Id"/> if it exists.
            </summary>
            <param name="Id">The id of the expense to delete from the list.</param>
            <example>
            <b>Remove the Expense with id 10.</b>
            <code>
            <![CDATA[
            try{
               HomeBudget homeBudget = new HomeBudget(dbfilename,false);
                
                // Shipment was cancelled, so remove the expense.
                homeBudget.expenses.Delete(10);
                
                
                
            }
            catch (Exception e){
                Console.WriteLine(e.Message); 
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.Expenses.List">
             <summary>
             Makes a copy of the list of expenses and returns it.
             </summary>
             <returns>A copy of the list of expenses.</returns>
             <example>
             <b>Display all the Expenses.</b>
             <code>
             <![CDATA[
             // Get expenses from a file
             try{
                 Expenses expenses = new Expenses(conn);
            
                 List<Expense> listOfExpenses = expenses.List();
             
                 // Write all the expenses to the console
                 foreach(Expense exp in listOfExpenses){
                     Console.WriteLine(Expense.Description);
                 }
             }
             catch (Exception e){
                 Console.WriteLine(e.Message);
             }
             ]]>
             </code>
             </example>
        </member>
        <member name="M:Budget.Expenses.UpdateExpense(System.Int32,System.DateTime,System.Int32,System.Double,System.String)">
            <summary>
             Finds an expense then updates it 
            </summary>
            <param name="id"> the id of the expense to be updated</param>
            <param name="date">the new date  given to the expense</param>
            <param name="category"> the new catgery id given to the expense</param>
            <param name="amount">the new  amount given to the updated expense</param>
            <param name="description">the new description given to the expense</param>
            <returns> the number of rows updated</returns>
            <b> writes 1 to the console if the update was successful</b>
            <example>
            <code>
            <![CDATA[
            
            try{
                Expenses expenses = new Expenses(conn);
                
                  // seeing if the row was updated
               int rowUpdated = expenses.UpdateExpense(3,DateTime.Now,4,23.97,"expensive stuff")
                  Console.WriteLine(rowUpdated);
                }
            }
             catch (Exception e){
                Console.WriteLine(e.Message);
            }
                /// ]]>
            
            </code>
            </example>
        </member>
        <member name="T:Budget.HomeBudget">
            <summary>
            Represents an entire home budget. Manages and stores the <see cref="T:Budget.Categories">Categories</see> and <see cref="T:Budget.Expenses">Expenses</see> classes
            </summary>
            <example>
            <code>
            <![CDATA[
            string filename = "budgetFile.txt";
            // Try catch in case of file reading errors
            try{
                // Open an existing budget
                HomeBudget budget = new HomeBudget(databaseFile, false);
                
                // Add an expense and category
                budget.expenses.Add(DateTime.Now, (int)Category.CategoryType.Credit, 4, "Protein Bar");
                budget.categories.Add("Gas", Category.CategoryType.Expense);
                
                // Save the file
                budget.SaveToFile(filename)
            }
            catch (Exception e){
                Console.WriteLine(e.Message)
            }
            
            ]]>
            </code>
            </example>
        </member>
        <member name="P:Budget.HomeBudget.categories">
            <summary>
            Gets the budget categories.
            </summary>
        </member>
        <member name="P:Budget.HomeBudget.expenses">
            <summary>
            Gets the budget expenses.
            </summary>
        </member>
        <member name="M:Budget.HomeBudget.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a new HomeBudget object with a connection to a database file. If the <paramref name="newDB"/> flag is set to true,
            a new database file will be created.
            </summary>
            <param name="databaseFile">The name of the database file to connect to or create.</param>
            <example>
            <code>
            <![CDATA[
            try{
                HomeBudget homeBudget = new HomeBudget(databaseFile, false);
                List<BudgetItem> budgetItems = homeBudget.GetBudgetItems(null, null, false, 0);
            }
            catch(Exception e){
                Console.WriteLine(e.Message);
            }
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Budget.HomeBudget.GetBudgetItems(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
             <summary>
             Creates a list of BudgetItems and returns it. The new list will only contain BudgetItems that 
             were created between or at the <paramref name="Start"/> and <paramref name="End"/> dates.
             If the <paramref name="FilterFlag"/> is true, the returned list of BudgetItems will all
             be in the Category that matches the <paramref name="CategoryID"/>.
             </summary>
             <param name="Start">The earliest possible date of a budget item in the returned list.</param>
             <param name="End">The latest possible date of a budget item in the returned list.</param>
             <param name="FilterFlag">Indicated whether the list should filter to only contain BudgetItems that have a category that match the <paramref name="CategoryID"/></param>
             <param name="CategoryID">The category id that the list will exclusively contain if the <paramref name="FilterFlag"/> is true.</param>
             <returns>A list of the BudgetItems that met the criteria indicated in the arguments passed.</returns>
             <example>
             
             Note: The output contains two ambiguous columns. The second last column is the value of that specific
             item (Amount), the last column is the total amount of expenses up to that item (Balance).
             <br/>For all examples below, assume the budget file contains the
             following elements:
             
             <code>
             Cat_ID  Expense_ID  Date                    Description                    Cost
                10       1       1/10/2018 12:00:00 AM   Clothes hat (on credit)         10
                 9       2       1/11/2018 12:00:00 AM   Credit Card hat                -10
                10       3       1/10/2019 12:00:00 AM   Clothes scarf(on credit)        15
                 9       4       1/10/2020 12:00:00 AM   Credit Card scarf              -15
                14       5       1/11/2020 12:00:00 AM   Eating Out McDonalds            45
                14       7       1/12/2020 12:00:00 AM   Eating Out Wendys               25
                14      10       2/1/2020 12:00:00 AM    Eating Out Pizza                33.33
                 9      13       2/10/2020 12:00:00 AM   Credit Card mittens            -15
                 9      12       2/25/2020 12:00:00 AM   Credit Card Hat                -25
                14      11       2/27/2020 12:00:00 AM   Eating Out Pizza                33.33
                14       9       7/11/2020 12:00:00 AM   Eating Out Cafeteria            11.11
             </code>
             
             <b>Getting a list of ALL budget items.</b>
             
             <code>
             <![CDATA[
              HomeBudget budget = new HomeBudget(databaseFile, false);
              
              // Get a list of all budget items
              var budgetItems = budget.GetBudgetItems(null, null, false, 0);
                        
              // print important information
              foreach (var bi in budgetItems)
              {
                  Console.WriteLine ( 
                      String.Format("{0} {1,-20}  {2,8:C} {3,12:C}", 
                         bi.Date.ToString("yyyy/MMM/dd"),
                         bi.ShortDescription,
                         bi.Amount, bi.Balance)
                   );
              }
            
             ]]>
             </code>
             
             Sample output:
             <code>
             2018/Jan/10 hat (on credit)       ($10.00)     ($10.00)
             2018/Jan/11 hat                     $10.00        $0.00
             2019/Jan/10 scarf(on credit)      ($15.00)     ($15.00)
             2020/Jan/10 scarf                   $15.00        $0.00
             2020/Jan/11 McDonalds             ($45.00)     ($45.00)
             2020/Jan/12 Wendys                ($25.00)     ($70.00)
             2020/Feb/01 Pizza                 ($33.33)    ($103.33)
             2020/Feb/10 mittens                 $15.00     ($88.33)
             2020/Feb/25 Hat                     $25.00     ($63.33)
             2020/Feb/27 Pizza                 ($33.33)     ($96.66)
             2020/Jul/11 Cafeteria             ($11.11)    ($107.77)
             </code>
             
             <b>Gets a list of items which are only in the category with id 10.</b>
             <code>
             <![CDATA[
              HomeBudget budget = new HomeBudget(databaseFile, false);
              
              // Get a list of all budget items
              var budgetItems = budget.GetBudgetItems(null, null, true, 10);
                        
              // print important information
              foreach (var bi in budgetItems)
              {
                  Console.WriteLine ( 
                      String.Format("{0} {1,-20}  {2,8:C} {3,12:C}", 
                         bi.Date.ToString("yyyy/MMM/dd"),
                         bi.ShortDescription,
                         bi.Amount, bi.Balance)
                   );
              }
            
             ]]>
             </code>
             
             Sample output:
             <code>
             2018/Jan/10 hat (on credit)       ($10.00)     ($10.00)
             2019/Jan/10 scarf(on credit)      ($15.00)     ($25.00)
             </code>
             <b>Getting a list of budget items between January 11th 2020 and February 25th 2020.</b>
             
             <code>
             <![CDATA[
              HomeBudget budget = new HomeBudget(databaseFile, false);
              
              // Get a list of all budget items
              var budgetItems = budget.GetBudgetItems(new DateTime(2020/1/11), new DateTime(2020,2,25), false, 0);
                        
              // print important information
              foreach (var bi in budgetItems)
              {
                  Console.WriteLine ( 
                      String.Format("{0} {1,-20}  {2,8:C} {3,12:C}", 
                         bi.Date.ToString("yyyy/MMM/dd"),
                         bi.ShortDescription,
                         bi.Amount, bi.Balance)
                   );
              }
            
             ]]>
             </code>
             
             Sample output:
             <code>
             2020/Jan/11 McDonalds             ($45.00)     ($45.00)
             2020/Jan/12 Wendys                ($25.00)     ($70.00)
             2020/Feb/01 Pizza                 ($33.33)    ($103.33)
             2020/Feb/10 mittens                 $15.00     ($88.33)
             2020/Feb/25 Hat                     $25.00     ($63.33)
             </code>
             </example>
             
        </member>
        <member name="M:Budget.HomeBudget.GetBudgetItemsByMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
             <summary>
             Creates a list of BudgetItemsByMonth, which contains BudgetItems grouped by month and returns it. 
             The new list will only contain BudgetItems that  were created between or at the <paramref name="Start"/> 
             and <paramref name="End"/> dates. If the <paramref name="FilterFlag"/> is true, the BudgetItems in the BudgetItemsByMonth 
             list will all be in the Category that matches the <paramref name="CategoryID"/>.
             </summary>
             <param name="Start">The earliest possible date of a budget item in the returned list.</param>
             <param name="End">The latest possible date of a budget item in the returned list.</param>
             <param name="FilterFlag">Indicated whether the list should filter to only contain BudgetItems that have a category that match the <paramref name="CategoryID"/></param>
             <param name="CategoryID">The category id that the BudgetItems in the BudgetItemsByMonth list will exclusively contain if the <paramref name="FilterFlag"/> is true.</param>
             <returns>A list of BudgetItemsByMonth, which groups together the BudgetItems, sorted in chronological order that meet the criteria indicated in the arguments passed.</returns>
             <example>
             For all examples below, assume the budget file contains the
             following elements:
             
             <code>
             Cat_ID  Expense_ID  Date                    Description                    Cost
                10       1       1/10/2018 12:00:00 AM   Clothes hat (on credit)         10
                 9       2       1/11/2018 12:00:00 AM   Credit Card hat                -10
                10       3       1/10/2019 12:00:00 AM   Clothes scarf(on credit)        15
                 9       4       1/10/2020 12:00:00 AM   Credit Card scarf              -15
                14       5       1/11/2020 12:00:00 AM   Eating Out McDonalds            45
                14       7       1/12/2020 12:00:00 AM   Eating Out Wendys               25
                14      10       2/1/2020 12:00:00 AM    Eating Out Pizza                33.33
                 9      13       2/10/2020 12:00:00 AM   Credit Card mittens            -15
                 9      12       2/25/2020 12:00:00 AM   Credit Card Hat                -25
                14      11       2/27/2020 12:00:00 AM   Eating Out Pizza                33.33
                14       9       7/11/2020 12:00:00 AM   Eating Out Cafeteria            11.11
             </code>
             
             <b>Display information about each Month of BudgetItems</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByMonth = budget.GetBudgetItemsByMonth(null, null, false, 0);
            
             // print important information
             foreach (var bi in budgetItemsByMonth)
             {
                Console.WriteLine(
                String.Format("{0} {1,-20}  {2,8} {3,12:C}",
                bi.Month, // The year and month grouped (YYYY/MM)
                bi.Details.Count, // Number of expenses in this category
                bi.Total // Total amount of the grouped expenses
                 )
                );
             }
             ]]>
             </code>
             Sample output:
             <code>
             2018/01                     2       $0.00
             2019/01                     1      $15.00
             2020/01                     3     ($55.00) 
             2020/02                     4     ($26.66)
             2020/07                     1     ($11.11)
             </code>
             
             <b>Display information about each month of BudgetItems in a specific category</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByMonth = budget.GetBudgetItemsByMonth(null, null, true, 10);
            
             // print important information
             foreach (var bi in budgetItemsByMonth)
             {
                Console.WriteLine(
                String.Format("{0} {1,-20}  {2,8} {3,12:C}",
                bi.Month, // The year and month grouped (YYYY/MM)
                bi.Details.Count, // Number of expenses in this category
                bi.Total // Total amount of the grouped expenses
                 )
                );
             }
             ]]>
             </code>
             Sample output:
             <code>
             2018/01                     1      $10.00
             2019/01                     1      $15.00
             </code>
             
             <b>Display information about each category of BudgetItems from February 25th 2020 onward.</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByMonth = budget.GetBudgetItemsByMonth(new Date(2020, 2, 25), null, false, 0);
            
             // print important information
             foreach (var bi in budgetItemsByMonth)
             {
                Console.WriteLine(
                String.Format("{0} {1,-20}  {2,8} {3,12:C}",
                bi.Month, // The year and month grouped (YYYY/MM)
                bi.Details.Count, // Number of expenses in this category
                bi.Total // Total amount of the grouped expenses
                 )
                );
             }
             ]]>
             </code>
             Sample output:
             <code>
             2020/02                     2      ($8.33)
             2020/07                     1     ($11.11)
             </code>
             </example>
        </member>
        <member name="M:Budget.HomeBudget.GeBudgetItemsByCategory(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
             <summary>
             Creates a list of BudgetItemsByCategory, which contains BudgetItems grouped by category and returns it. 
             The new list will only contain BudgetItems that  were created between or at the <paramref name="Start"/> 
             and <paramref name="End"/> dates. If the <paramref name="FilterFlag"/> is true, the BudgetItems in the BudgetItemsByMonth 
             list will all be in the Category that matches the <paramref name="CategoryID"/>.
             Since the <paramref name="FilterFlag"/> filters to only contain one category, the returned list of BudgetItems
             will only have one entry if the <paramref name="FilterFlag"/> is true.
             </summary>
             <param name="Start">The earliest possible date of a budget item in the returned list.</param>
             <param name="End">The latest possible date of a budget item in the returned list.</param>
             <param name="FilterFlag">Indicated whether the list should filter to only contain BudgetItems that have a category that match the <paramref name="CategoryID"/></param>
             <param name="CategoryID">The category id that the BudgetItems in the BudgetItemsByMonth list will exclusively contain if the <paramref name="FilterFlag"/> is true.</param>
             <returns>A list of BudgetItemsByCategory, which groups together the BudgetItems, ordered by category name, that meet the criteria indicated in the arguments passed.</returns>
             <example>
             For all examples below, assume the budget file contains the
             following elements:
             
             <code>
             Cat_ID  Expense_ID  Date                    Description                    Cost
                10       1       1/10/2018 12:00:00 AM   Clothes hat (on credit)         10
                 9       2       1/11/2018 12:00:00 AM   Credit Card hat                -10
                10       3       1/10/2019 12:00:00 AM   Clothes scarf(on credit)        15
                 9       4       1/10/2020 12:00:00 AM   Credit Card scarf              -15
                14       5       1/11/2020 12:00:00 AM   Eating Out McDonalds            45
                14       7       1/12/2020 12:00:00 AM   Eating Out Wendys               25
                14      10       2/1/2020 12:00:00 AM    Eating Out Pizza                33.33
                 9      13       2/10/2020 12:00:00 AM   Credit Card mittens            -15
                 9      12       2/25/2020 12:00:00 AM   Credit Card Hat                -25
                14      11       2/27/2020 12:00:00 AM   Eating Out Pizza                33.33
                14       9       7/11/2020 12:00:00 AM   Eating Out Cafeteria            11.11
             </code>
             
             <b>Display information about each category of BudgetItems</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByCat = budget.GeBudgetItemsByCategory(null, null, false, 0);
             
             // print important information
             foreach (var bi in budgetItemsByCat)
             {
                 Console.WriteLine(
                 String.Format("{0} {1,-10}  {2,8} {3,12:C}",
                 bi.Category, // The name of the category grouped
                 bi.Details.Count, // Number of expenses in this category
                 bi.Total // Total amount of the grouped expenses
                     )
                 );
             }
             ]]>
             </code>
             Sample output:
             <code>
             Credit Card                     4      $65.00
             Clothes                         2     ($25.00)
             Eating Out                      5    ($147.77)
             </code>
             
             <b>Display information about a specific category of BudgetItems</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByCat = budget.GeBudgetItemsByCategory(null, null, true, 10);
             
             // print important information
             foreach (var bi in budgetItemsByCat)
             {
                 Console.WriteLine(
                 String.Format("{0} {1,-10}  {2,8} {3,12:C}",
                 bi.Category, // The name of the category grouped
                 bi.Details.Count, // Number of expenses in this category
                 bi.Total // Total amount of the grouped expenses
                     )
                 );
             }
             ]]>
             </code>
             Sample output:
             <code>
             Clothes                         2     ($25.00)
             </code>
             
             <b>Display information about each category of BudgetItems between January 10th 2020 and February 25th 2020</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByCat = budget.GeBudgetItemsByCategory(new DateTime(2020, 1, 10), new DateTime(2020, 2, 25), false, 0);
             
             // print important information
             foreach (var bi in budgetItemsByCat)
             {
                 Console.WriteLine(
                 String.Format("{0} {1,-10}  {2,8} {3,12:C}",
                 bi.Category, // The name of the category grouped
                 bi.Details.Count, // Number of expenses in this category
                 bi.Total // Total amount of the grouped expenses
                     )
                 );
             }
             ]]>
             </code>
             Sample output:
             <code>
             Credit Card                     3      $55.00
             Eating Out                      3    ($103.33)
             </code>
             </example>
        </member>
        <member name="M:Budget.HomeBudget.GetBudgetDictionaryByCategoryAndMonth(System.Nullable{System.DateTime},System.Nullable{System.DateTime},System.Boolean,System.Int32)">
             <summary>
             Creates a list of dictionaries that contain details on all expenses grouped by <see cref="T:Budget.Category"/> and month.
             There is also a dictionary representing the total, which encompasses all the expenses.
             Each Dictionary has info on the year/month of the expenses, the total amount of the grouped expenses,
             the details of each item in the grouping, and the amount cost by each item. If the <paramref name="FilterFlag"/> is 
             set to true, only items in teh <see cref="T:Budget.Category"/> matching the <paramref name="CategoryID"/> will be in the returned 
             list of dictionaries.
             </summary>
             <param name="Start">The earliest possible date of an expense in the returned list.</param>
             <param name="End">The latest possible date of an expense in the returned list.</param>
             <param name="FilterFlag">Indicated whether the returned list should only contain expenses whose categories match <paramref name="CategoryID"/>.</param>
             <param name="CategoryID">The id that will exclusively be contained in the return list if <paramref name="FilterFlag"/> is true.</param>
             <returns>
             A list of dictionaries containing details on the expenses grouped by month and category.
             Each dictionary contains several key value pairs, "Month" gets the year and month of the expenses grouped in the dictionary,
             and "Total" returns the total expense of the items grouped in the dictionary. There are also key value pairs of
             "details:CATEGORY NAME" (where CATEGORY NAME is a name of a <see cref="T:Budget.Category"/>) which returns a list of budget items that fell in that category, and 
             "CATEGORY NAME" (where CATEGORY NAME is a name of a <see cref="T:Budget.Category"/>) which returns the total amount of all the items in the category passed.
             </returns>
             <example>
             For all examples below, assume the budget file contains the
             following elements:
             
             <code>
             Cat_ID  Expense_ID  Date                    Description                    Cost
                10       1       1/10/2018 12:00:00 AM   Clothes hat (on credit)         10
                 9       2       1/11/2018 12:00:00 AM   Credit Card hat                -10
                10       3       1/10/2019 12:00:00 AM   Clothes scarf(on credit)        15
                 9       4       1/10/2020 12:00:00 AM   Credit Card scarf              -15
                14       5       1/11/2020 12:00:00 AM   Eating Out McDonalds            45
                14       7       1/12/2020 12:00:00 AM   Eating Out Wendys               25
                14      10       2/1/2020 12:00:00 AM    Eating Out Pizza                33.33
                 9      13       2/10/2020 12:00:00 AM   Credit Card mittens            -15
                 9      12       2/25/2020 12:00:00 AM   Credit Card Hat                -25
                14      11       2/27/2020 12:00:00 AM   Eating Out Pizza                33.33
                14       9       7/11/2020 12:00:00 AM   Eating Out Cafeteria            11.11
             </code>
             
             <b>Display information, distributed monthly, about each category of BudgetItems</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByCategoryAndMonth = budget.GetBudgetDictionaryByCategoryAndMonth(null, null, false, 0);
            
             // print important information
             foreach (Dictionary<string, object> item in budgetItemsByCategoryAndMonth) {
                 string date = "";
                 decimal total = 0;
                 List<string> categories = new List<string>();
                 List<decimal> categoryTotals = new List<decimal>();
            
                    foreach (KeyValuePair<string, object> pair in item)
                    {
                        if (pair.Key.StartsWith("detail")) continue; // Skip the details
            
                        if (pair.Key == "Month") date = (string) pair.Value;
                        else if (pair.Key == "Total") total = decimal.Parse((string) pair.Value);
                        else
                        {
                            categories.Add(pair.Key);
                            categoryTotals.Add(decimal.Parse((string) pair.Value));
                        }
                     } 
                 
                 // Show the month and total of that month
                 Console.WriteLine(
                 String.Format("{0} {1,-20}  {2,8:C}",
                 date, total
                 ));
                
                 // Show the details of each category in that month
                 for (int i = 0; i < categories.Count; i++)
                 {
                     Console.WriteLine(
                     String.Format("{0} {1,-10}  {2,8:C}",
                     categories[i], categoryTotals[i]
                     ));
                 }
                 
                 // Add spacing
                 Console.WriteLine();
             }
             ]]>
             </code>
             Sample output:
             <code>
             2018/01             $0.00
             Clothes             $10.00 
             Credit Card        ($10.00)
             
             2019/01             $15.00
             Clothes             $15.00
             
             2020/01             $55.00
             Credit Card        ($15.00)
             Eating Out          $70.00
             
             2020/02             $26.66
             Eating Out          $66.66
             Credit Card        ($40.00)
             
             2020/07             $11.11
             Eating Out          $11.11
             </code>
             
             <b>Display information, distributed monthly, about each category of BudgetItems,
             where each BudgetItem is in category 14.
             Only include BudgetItems created on or before February 1st 2020</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByCategoryAndMonth = budget.GetBudgetDictionaryByCategoryAndMonth(null, new DateTime(2020,2,1), true, 10);
            
             // print important information
             foreach (Dictionary<string, object> item in budgetItemsByCategoryAndMonth) {
                 string date = "";
                 decimal total = 0;
                 List<string> categories = new List<string>();
                 List<decimal> categoryTotals = new List<decimal>();
            
                    foreach (KeyValuePair<string, object> pair in item)
                    {
                        if (pair.Key.StartsWith("detail")) continue; // Skip the details
            
                        if (pair.Key == "Month") date = (string) pair.Value;
                        else if (pair.Key == "Total") total = decimal.Parse((string) pair.Value);
                        else
                        {
                            categories.Add(pair.Key);
                            categoryTotals.Add(decimal.Parse((string) pair.Value));
                        }
                     } 
                 
                 // Show the month and total of that month
                 Console.WriteLine(
                 String.Format("{0} {1,-20}  {2,8:C}",
                 date, total
                 ));
                
                 // Show the details of each category in that month
                 for (int i = 0; i < categories.Count; i++)
                 {
                     Console.WriteLine(
                     String.Format("{0} {1,-10}  {2,8:C}",
                     categories[i], categoryTotals[i]
                     ));
                 }
                 
                 // Add spacing
                 Console.WriteLine();
             }
             ]]>
             </code>
             Sample output:
             <code> 
             2020/01             $70.00
             Eating Out          $70.00
             
             2020/02             $33.33
             Eating Out          $33.33
             </code>
             
             <b>Display information, distributed monthly, about each category of BudgetItems.
             Only include BudgetItems between January 10th 2020 and February 25th 2020</b>
             <code>
             <![CDATA[
             HomeBudget budget = new HomeBudget(databaseFile, false);
            
             // Get a list of all budget items
             var budgetItemsByCategoryAndMonth = budget.GetBudgetDictionaryByCategoryAndMonth(new DateTime(2020,1,10), DateTime(2020,2,25), false, 0);
            
             // print important information
             foreach (Dictionary<string, object> item in budgetItemsByCategoryAndMonth) {
                 string date = "";
                 decimal total = 0;
                 List<string> categories = new List<string>();
                 List<decimal> categoryTotals = new List<decimal>();
            
                    foreach (KeyValuePair<string, object> pair in item)
                    {
                        if (pair.Key.StartsWith("detail")) continue; // Skip the details
            
                        if (pair.Key == "Month") date = (string) pair.Value;
                        else if (pair.Key == "Total") total = decimal.Parse((string) pair.Value);
                        else
                        {
                            categories.Add(pair.Key);
                            categoryTotals.Add(decimal.Parse((string) pair.Value));
                        }
                     } 
                 
                 // Show the month and total of that month
                 Console.WriteLine(
                 String.Format("{0} {1,-20}  {2,8:C}",
                 date, total
                 ));
                
                 // Show the details of each category in that month
                 for (int i = 0; i < categories.Count; i++)
                 {
                     Console.WriteLine(
                     String.Format("{0} {1,-10}  {2,8:C}",
                     categories[i], categoryTotals[i]
                     ));
                 }
                 
                 // Add spacing
                 Console.WriteLine();
             }
             ]]>
             </code>
             Sample output:
             <code>
             2020/01             $55.00
             Credit Card        ($15.00)
             Eating Out          $70.00
             
             2020/02            ($6.67)
             Eating Out          $33.33
             Credit Card        ($40.00)
             </code>
             </example>
        </member>
    </members>
</doc>
